<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>求最大路径</title>
      <link href="/2019/12/18/algorithm/dynamic-programming/"/>
      <url>/2019/12/18/algorithm/dynamic-programming/</url>
      
        <content type="html"><![CDATA[<h3 id="经典的动态规划数字三角形问题"><a href="#经典的动态规划数字三角形问题" class="headerlink" title="经典的动态规划数字三角形问题"></a>经典的动态规划数字三角形问题</h3><p><img src="../../images/dynamic-programming.png" alt=""></p><p>在上面的数字三角形中寻找一条从顶部到底部的路径，使得路径上所经过的数字之和最大。路径上的每一步都只能往左下或者右下走。</p><ul><li>只要求出这个最大和即可，不必给出具体路径。</li><li>三角形的行数大于1小于等于100，数字为0-99</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有效的括号</title>
      <link href="/2019/12/13/algorithm/valid-parentheses/"/>
      <url>/2019/12/13/algorithm/valid-parentheses/</url>
      
        <content type="html"><![CDATA[<h5 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h5><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><ul><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>注意空字符串可被认为是有效字符串。</li></ul><a id="more"></a><h6 id="示例-1-输入-“-”-输出-true"><a href="#示例-1-输入-“-”-输出-true" class="headerlink" title="示例 1:输入: “()”           输出: true"></a>示例 1:输入: “()”           输出: true</h6><h6 id="示例-2-输入-“-”-输出-true"><a href="#示例-2-输入-“-”-输出-true" class="headerlink" title="示例 2:输入: “()[]{}”       输出: true"></a>示例 2:输入: “()[]{}”       输出: true</h6><h6 id="示例-3-输入-“-”-输出-false"><a href="#示例-3-输入-“-”-输出-false" class="headerlink" title="示例 3:输入: “(]”           输出: false"></a>示例 3:输入: “(]”           输出: false</h6><h6 id="示例-4-输入-“-”-输出-false"><a href="#示例-4-输入-“-”-输出-false" class="headerlink" title="示例 4:输入: “([)]”         输出: false"></a>示例 4:输入: “([)]”         输出: false</h6><h6 id="示例-5-输入-“-”-输出-true"><a href="#示例-5-输入-“-”-输出-true" class="headerlink" title="示例 5:输入: “{[]}”         输出: true"></a>示例 5:输入: “{[]}”         输出: true</h6><h5 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h5><p>可以边遍历边匹配。也就是遍历的时候遇到左括号存入数组，下次遇到的第一个右括号必须和数组中最后一个元素匹配，否则为无效字符串，匹配完成后从数组中删除此元素。若最终数组为空，表示括号已全部匹配完，字符串有效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isValid = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> map = &#123;</span><br><span class="line">        <span class="string">"("</span>: <span class="string">")"</span>,</span><br><span class="line">        <span class="string">"["</span>: <span class="string">"]"</span>,</span><br><span class="line">        <span class="string">"&#123;"</span>: <span class="string">"&#125;"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> leftArr = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> ch <span class="keyword">of</span> s)&#123;</span><br><span class="line">        <span class="keyword">if</span> (ch <span class="keyword">in</span> map) leftArr.push(ch); <span class="comment">//为左括号时，顺序保存</span></span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">//为右括号时，与数组末位匹配</span></span><br><span class="line">            <span class="keyword">if</span>(ch != map[leftArr.pop()]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !leftArr.length <span class="comment">//防止全部为左括号</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h4 id="in-运算符"><a href="#in-运算符" class="headerlink" title="in 运算符"></a>in 运算符</h4><p>如果指定的属性在指定的对象或其原型链中，则 in 运算符返回true。</p><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prop in object</span><br></pre></td></tr></table></figure><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><ul><li>prop         一个字符串类型或者 symbol 类型的属性名或者数组索引（非symbol类型将会强制转为字符串）。</li><li>objectName   检查它（或其原型链）是否包含具有指定名称的属性的对象。</li></ul><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><ul><li><p>数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> trees = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"redwood"</span>, <span class="string">"bay"</span>, <span class="string">"cedar"</span>, <span class="string">"oak"</span>, <span class="string">"maple"</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="keyword">in</span> trees        <span class="comment">// 返回true</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">in</span> trees        <span class="comment">// 返回true</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">in</span> trees        <span class="comment">// 返回false</span></span><br><span class="line"></span><br><span class="line"><span class="string">"bay"</span> <span class="keyword">in</span> trees    <span class="comment">// 返回false (必须使用索引号,而不是数组元素的值)</span></span><br><span class="line"></span><br><span class="line"><span class="string">"length"</span> <span class="keyword">in</span> trees <span class="comment">// 返回true (length是一个数组属性)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Symbol</span>.iterator <span class="keyword">in</span> trees <span class="comment">// 返回true (数组可迭代，只在ES2015+上有效)</span></span><br></pre></td></tr></table></figure></li><li><p>内置对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"PI"</span> <span class="keyword">in</span> <span class="built_in">Math</span>          <span class="comment">// 返回true</span></span><br></pre></td></tr></table></figure></li><li><p>自定义对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mycar = &#123;</span><br><span class="line">  make: <span class="string">"Honda"</span>,</span><br><span class="line">  model: <span class="string">"Accord"</span>,</span><br><span class="line">  year: <span class="number">1998</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">"make"</span> <span class="keyword">in</span> mycar  <span class="comment">// 返回true</span></span><br><span class="line"><span class="string">"model"</span> <span class="keyword">in</span> mycar <span class="comment">// 返回true</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p>in右操作数必须是一个对象值。例如，你可以指定使用String构造函数创建的字符串，但不能指定字符串文字。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color1 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"green"</span>);</span><br><span class="line"><span class="string">"length"</span> <span class="keyword">in</span> color1 <span class="comment">// 返回true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> color2 = <span class="string">"coral"</span>;</span><br><span class="line"><span class="string">"length"</span> <span class="keyword">in</span> color2 <span class="comment">// 报错(color2不是对象)</span></span><br></pre></td></tr></table></figure></p><h4 id="对被删除或值为-undefined-的属性使用in"><a href="#对被删除或值为-undefined-的属性使用in" class="headerlink" title="对被删除或值为 undefined 的属性使用in"></a>对被删除或值为 undefined 的属性使用in</h4><ul><li>如果你使用 delete 运算符删除了一个属性，则 in 运算符对所删除属性返回 false。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mycar = &#123;<span class="attr">make</span>: <span class="string">"Honda"</span>, <span class="attr">model</span>: <span class="string">"Accord"</span>, <span class="attr">year</span>: <span class="number">1998</span>&#125;;</span><br><span class="line"><span class="keyword">delete</span> mycar.make;</span><br><span class="line"><span class="string">"make"</span> <span class="keyword">in</span> mycar;  <span class="comment">// 返回false</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> trees = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"redwood"</span>, <span class="string">"bay"</span>, <span class="string">"cedar"</span>, <span class="string">"oak"</span>, <span class="string">"maple"</span>);</span><br><span class="line"><span class="keyword">delete</span> trees[<span class="number">3</span>];</span><br><span class="line"><span class="number">3</span> <span class="keyword">in</span> trees; <span class="comment">// 返回false</span></span><br></pre></td></tr></table></figure><ul><li>如果你只是将一个属性的值赋值为undefined，而没有删除它，则 in 运算仍然会返回true。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mycar = &#123;<span class="attr">make</span>: <span class="string">"Honda"</span>, <span class="attr">model</span>: <span class="string">"Accord"</span>, <span class="attr">year</span>: <span class="number">1998</span>&#125;;</span><br><span class="line">mycar.make = <span class="literal">undefined</span>;</span><br><span class="line"><span class="string">"make"</span> <span class="keyword">in</span> mycar;  <span class="comment">// 返回true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> trees = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"redwood"</span>, <span class="string">"bay"</span>, <span class="string">"cedar"</span>, <span class="string">"oak"</span>, <span class="string">"maple"</span>);</span><br><span class="line">trees[<span class="number">3</span>] = <span class="literal">undefined</span>;</span><br><span class="line"><span class="number">3</span> <span class="keyword">in</span> trees; <span class="comment">// 返回true</span></span><br><span class="line"><span class="string">"make"</span> <span class="keyword">in</span> mycar;  <span class="comment">// 返回true</span></span><br></pre></td></tr></table></figure><h4 id="继承属性"><a href="#继承属性" class="headerlink" title="继承属性"></a>继承属性</h4><p>如果一个属性是从原型链上继承来的，in 运算符也会返回 true。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"toString"</span> <span class="keyword">in</span> &#123;&#125;; <span class="comment">// 返回true</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> in 运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数反转</title>
      <link href="/2019/12/12/algorithm/Integer-inversion/"/>
      <url>/2019/12/12/algorithm/Integer-inversion/</url>
      
        <content type="html"><![CDATA[<h5 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h5><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p><a id="more"></a><h6 id="示例-1-输入-123-输出-321"><a href="#示例-1-输入-123-输出-321" class="headerlink" title="示例 1:输入: 123   输出: 321"></a>示例 1:输入: 123   输出: 321</h6><h6 id="示例-2-输入-123-输出-321"><a href="#示例-2-输入-123-输出-321" class="headerlink" title="示例 2:输入: -123  输出: -321"></a>示例 2:输入: -123  输出: -321</h6><h6 id="示例-3-输入-120-输出-21"><a href="#示例-3-输入-120-输出-21" class="headerlink" title="示例 3:输入: 120   输出: 21"></a>示例 3:输入: 120   输出: 21</h6><h6 id="注意-假设我们的环境只能存储得下-32-位的有符号整数，则其数值范围为-−231-231-−-1-。请根据这个假设，如果反转后整数溢出那么就返回-0。"><a href="#注意-假设我们的环境只能存储得下-32-位的有符号整数，则其数值范围为-−231-231-−-1-。请根据这个假设，如果反转后整数溢出那么就返回-0。" class="headerlink" title="注意:假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。"></a>注意:假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; x</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverse = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> overflow = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (x &gt;= <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span> || x &lt;= -<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">31</span>)) ? <span class="number">0</span> : x</span><br><span class="line">    &#125;</span><br><span class="line">    x = overflow(x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> isNegative = x &lt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (isNegative) &#123;</span><br><span class="line">        x = -x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (x &gt; <span class="number">9</span>) &#123;</span><br><span class="line">        a = a * <span class="number">10</span> + x % <span class="number">10</span> * <span class="number">10</span></span><br><span class="line">        x = <span class="built_in">parseInt</span>(x / <span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    a += x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> isNegative ? overflow(-a) : overflow(a)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="Math-pow-x-y"><a href="#Math-pow-x-y" class="headerlink" title="Math.pow(x,y)"></a>Math.pow(x,y)</h5><p>pow() 方法可返回 x 的 y 次幂的值。</p><ul><li>x    必需。底数。必须是数字。</li><li>y    必需。幂数。必须是数字。</li><li>说明:如果结果是虚数或负数，则该方法将返回 NaN。如果由于指数过大而引起浮点溢出，则该方法将返回 Infinity。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>二分法 与 JS移位运算符</title>
      <link href="/2019/12/11/algorithm/dichotomy/"/>
      <url>/2019/12/11/algorithm/dichotomy/</url>
      
        <content type="html"><![CDATA[<h3 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h3><p>适用于：数组、有序。<br>逻辑为：优先和数组的中间元素比较，如果等于中间元素，则直接返回。如果不等于则取半继续查找。</p><h5 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h5><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><a id="more"></a><h6 id="示例-1-输入-1-3-5-6-5-输出-2"><a href="#示例-1-输入-1-3-5-6-5-输出-2" class="headerlink" title="示例 1:   输入: [1,3,5,6], 5       输出: 2"></a>示例 1:   输入: [1,3,5,6], 5       输出: 2</h6><h6 id="示例-2-输入-1-3-5-6-2-输出-1"><a href="#示例-2-输入-1-3-5-6-2-输出-1" class="headerlink" title="示例 2:   输入: [1,3,5,6], 2       输出: 1"></a>示例 2:   输入: [1,3,5,6], 2       输出: 1</h6><h6 id="示例-3-输入-1-3-5-6-7-输出-4"><a href="#示例-3-输入-1-3-5-6-7-输出-4" class="headerlink" title="示例 3:   输入: [1,3,5,6], 7       输出: 4"></a>示例 3:   输入: [1,3,5,6], 7       输出: 4</h6><h6 id="示例-4-输入-1-3-5-6-0-输出-0"><a href="#示例-4-输入-1-3-5-6-0-输出-0" class="headerlink" title="示例 4:   输入: [1,3,5,6], 0       输出: 0"></a>示例 4:   输入: [1,3,5,6], 0       输出: 0</h6><h6 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchInsert = <span class="function"><span class="keyword">function</span> (<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (target &gt; nums[right]) <span class="keyword">return</span> right + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">var</span> index = <span class="built_in">parseInt</span>((left + right) &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (nums[index] &lt; target) left = index + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> right = index;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="JS移位运算符"><a href="#JS移位运算符" class="headerlink" title="JS移位运算符"></a>JS移位运算符</h3><p>移位运算就是对二进制进行有规律低移位</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS移位运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[object Object]</title>
      <link href="/2019/06/30/eventLoop/eventLoop/"/>
      <url>/2019/06/30/eventLoop/eventLoop/</url>
      
        <content type="html"><![CDATA[<h2 id="一道面试题"><a href="#一道面试题" class="headerlink" title="一道面试题"></a>一道面试题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(function() &#123;</span><br><span class="line">  console.log(1);</span><br><span class="line">&#125;, 0)</span><br><span class="line"></span><br><span class="line">new Promise(function(resolve,reject) &#123;</span><br><span class="line">  resolve(2)</span><br><span class="line">  console.log(0)</span><br><span class="line">&#125;).then(console.log)</span><br><span class="line"></span><br><span class="line">console.log(3);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="控制台打印结果"><a href="#控制台打印结果" class="headerlink" title="控制台打印结果"></a>控制台打印结果</h3><p><img src="../../images/eventLoop.png" alt=""></p><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><ul><li>JavaScript是单线程的语言</li><li>Event Loop是javascript的执行机制</li></ul><p>js的单线程（single threaded）和异步（asynchronous）:<br>  单线程：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new Promise(function(resolve,reject) &#123;</span><br><span class="line">  console.log(0)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(3);</span><br></pre></td></tr></table></figure></p><p>  进入队列：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(function() &#123;</span><br><span class="line">  console.log(1);</span><br><span class="line">&#125;, 0)</span><br><span class="line"></span><br><span class="line">.then(console.log)</span><br></pre></td></tr></table></figure></p><blockquote><p>new Promise() 是同步任务<br>.then() 是异步任务</p></blockquote><p>微任务与宏任务：<br>  微任务：macro-task<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.then(console.log)</span><br></pre></td></tr></table></figure></p><p>  宏任务：micro-task<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(function() &#123;</span><br><span class="line">  console.log(1);</span><br><span class="line">&#125;, 0)</span><br></pre></td></tr></table></figure></p><h3 id="其他的微任务和宏任务："><a href="#其他的微任务和宏任务：" class="headerlink" title="其他的微任务和宏任务："></a>其他的微任务和宏任务：</h3><p>  微任务：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- Promise</span><br><span class="line">- process.nextTick</span><br></pre></td></tr></table></figure></p><p>  宏任务：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- setTimeout</span><br><span class="line">- setInterval</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>表单提交规则</title>
      <link href="/2019/06/30/formSubmissionRules/formSubmissionRules/"/>
      <url>/2019/06/30/formSubmissionRules/formSubmissionRules/</url>
      
        <content type="html"><![CDATA[<h2 id="表单提交规则"><a href="#表单提交规则" class="headerlink" title="表单提交规则"></a>表单提交规则</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">"formInline"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"审批人"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"formInline.user"</span> <span class="attr">placeholder</span>=<span class="string">"审批人"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handleClick() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">123</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>input 输入框内按下enter键，会触发button方法<br> <img src="../../images/formSubmissionRules.png" alt="image"></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>button 标签添加 type=”button”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;handleClick&quot; type=&quot;button&quot;&gt;Button&lt;/button&gt;</span><br></pre></td></tr></table></figure></p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>This is because of the following form submission rules in the HTML specification:<br>If a form has only one input field then hitting enter in this field triggers form submit<br>if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter doesn’t trigger submit<br>if a form has one or more input fields and one or more buttons or input[type=submit] then hitting enter in any of the input fields will trigger the click handler on the first button or input[type=submit] and a submit handler on the enclosing form</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>函数防抖与函数节流</title>
      <link href="/2018/10/18/Debounce-And-Throttle/Debounce-And-Throttle/"/>
      <url>/2018/10/18/Debounce-And-Throttle/Debounce-And-Throttle/</url>
      
        <content type="html"><![CDATA[<h3 id="函数防抖-debounce"><a href="#函数防抖-debounce" class="headerlink" title="函数防抖  debounce"></a>函数防抖  debounce</h3><p>场景：淘宝首页，侧边栏快速划过不显示内容，即从 【女装】快速无间隙滑动到【鲜花】，两模块中间的内容不显示。停到某一个侧边栏才显示侧边栏内容。</p><a id="more"></a><p><img src="../../images/taobao.png" alt=""></p><p>以 页面元素滚动监听 为例：</p><p>html 部分<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"head"</span>&gt;</span>顶部导航栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>css 部分<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10000px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#aecabd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.head</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#aacdef</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>js 部分<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>);</span><br><span class="line"><span class="keyword">var</span> head = <span class="built_in">document</span>.querySelector(<span class="string">'.head'</span>);</span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  flag = <span class="literal">false</span>;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.scrollY &gt;= <span class="number">200</span>) &#123;</span><br><span class="line">      head.style.display = <span class="string">'block'</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      head.style.display = <span class="string">'none'</span></span><br><span class="line">    &#125;</span><br><span class="line">    flag = <span class="literal">true</span>;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>分析：</p><blockquote><ol><li><p>flag = true,  不会进 if</p></li><li><p>flag = false,  进 if 直接 return</p><ul><li><p>进入 false return</p></li><li><p>进入 false return</p><ul><li><p>进入 false return</p></li><li><p>…… 循环，直到不再出发页面滚动事件（即 鼠标 或 键盘 不在动）</p></li></ul></li></ul></li><li><p>停止滚动 定时器开始计时 1000ms 以后 flag = true</p></li><li><p>flag = true, 循环 1， 2， 3</p></li></ol></blockquote><h3 id="函数节流-开关-throttle"><a href="#函数节流-开关-throttle" class="headerlink" title="函数节流 (开关)  throttle"></a>函数节流 (开关)  throttle</h3><p>html 和 css 部分 同 函数防抖</p><p>js 部分<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>);</span><br><span class="line"><span class="keyword">var</span> head = <span class="built_in">document</span>.querySelector(<span class="string">'.head'</span>);</span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">    flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  flag = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.scrollY &gt;= <span class="number">200</span>) &#123;</span><br><span class="line">    head.style.display = <span class="string">'block'</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    head.style.display = <span class="string">'none'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>分析：</p><blockquote><ol><li>第一次：<ul><li>flag = true,  不会进 if</li><li>flag = false,  执行后续代码</li></ul></li><li>第二次：<ul><li>flag = false,  进 if</li><li>flag = true,  return 不执行后续代码</li></ul></li><li>第三次：<ul><li>同第一次</li></ul></li></ol></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
